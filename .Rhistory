}
cbind(stat.vector.logOR,stat.vector.OR)
get.vectors <- function(N,lambda,sims,theta1=.5,theta2=.5){
##need to add in passing lambda
stat.vector.OR <- rep(NA,sims)
stat.vector.logOR <- rep(NA,sims)
for(i in 1:sims){
stat.vector.OR[i] <- get.statistic.OR(theta1 = theta1, theta2 = theta2, N = N, lambda = lambda)
stat.vector.logOR[i] <- get.statistic.logOR(theta1 = theta1, theta2 = theta2, N = N, lambda = lambda)
}
cbind(stat.vector.OR,stat.vector.logOR)
}
get.vectors(N=50,lambda=0.5,sims=1000)
a <- get.vectors(N=50,lambda=0.5,sims=1000)
a[,1]
a
str(a)
colnames(a)
get.quants <- function(df){
stat.vector.OR <- df[,1]
stat.vector.logOR <- df[,2]
par(new=F,mfrow=c(1,1))
or.q <- qqnorm(stat.vector.OR,ylim = c(-4,4),plot.it=F)
logor.q <- qqnorm(stat.vector.logOR,ylim = c(-4,4),plot.it=F)
plot(range(or.q$x,logor.q$x),range(or.q$y,logor.q$y),type="n",xlim = c(-4,4),ylim=c(-4,4),ylab="Sample Quantiles",xlab="Theoretical Quantiles")
points(or.q)
points(logor.q,col="red")
qqline(stat.vector.OR)
qqline(stat.vector.logOR,col="red")
legend(2,-2,legend = c("Odds Ratio","Log Odds Ratio"),fill=c("black","red"))
}
get.graph <- function(N,df){
stat.vector.OR <- df[,1]
stat.vector.logOR <- df[,2]
#graph
par(mfrow=c(2,1))
z=seq(-5,5,0.01)
hist(stat.vector.OR,freq = F,breaks=40, main=paste("Odds Ratio (N = ",N,")",sep=''),xlab="Value of Z Statistic")
lines(z,dnorm(z),col="red")
hist(stat.vector.logOR,freq = F,breaks=40,main=paste("Log Odds Ratio (N = ",N,")",sep=''),xlab="Value of Z Statistic")
lines(z,dnorm(z),col="red")
}
get.vectors <- function(N,lambda,sims,theta1=.5,theta2=.5){
##need to add in passing lambda
stat.vector.OR <- rep(NA,sims)
stat.vector.logOR <- rep(NA,sims)
for(i in 1:sims){
stat.vector.OR[i] <- get.statistic.OR(theta1 = theta1, theta2 = theta2, N = N, lambda = lambda)
stat.vector.logOR[i] <- get.statistic.logOR(theta1 = theta1, theta2 = theta2, N = N, lambda = lambda)
}
cbind(stat.vector.OR,stat.vector.logOR)
}
N <- 50
df <- get.vectors(N=N,lambda=0.5,sims=1000)
get.graph(N,df)
get.quants(df)
get.quants <- function(df){
stat.vector.OR <- df[,1]
stat.vector.logOR <- df[,2]
par(new=F,mfrow=c(1,1))
or.q <- qqnorm(stat.vector.OR,ylim = c(-4,4),plot.it=F)
logor.q <- qqnorm(stat.vector.logOR,ylim = c(-4,4),plot.it=F)
plot(range(or.q$x,logor.q$x),range(or.q$y,logor.q$y),type="n",xlim = c(-4,4),ylim=c(-4,4),ylab="Sample Quantiles",xlab="Theoretical Quantiles")
points(or.q)
points(logor.q,col="red")
qqline(stat.vector.OR)
qqline(stat.vector.logOR,col="red")
legend(1,-2,legend = c("Odds Ratio","Log Odds Ratio"),fill=c("black","red"))
}
get.quants(df)
runApp('Desktop/Vanderbilt/Current/Convergence Project/convergence_shiny')
runApp('Desktop/Vanderbilt/Current/Convergence Project/convergence_shiny')
p.c <- .25
p.t <- .4
p.chat <- .2 #cv
p.that <- .3 #olpv
beta <- .1
alpha <- .05
qnorm(1-alpha/2)
qnorm(1-beta)
pb <- (p.t+p.c)/2
ceiling(((qnorm(1-alpha/2)*sqrt(2*pb*(1-pb)) + qnorm(1-beta)*sqrt(p.t*(1-p.t) + p.c*(1-p.c)))^2)/(p.t-p.c)^2)
shiny::runApp('Desktop/Vanderbilt/Current/Convergence Project/convergence_shiny')
shiny::runApp('Desktop/Vanderbilt/Current/Convergence Project/convergence_shiny')
shiny::runApp('Desktop/R Files/Data Expo 2018/VUBiostat-JSM18/Preliminary_Shiny')
barplot(c(o,aa,h,w),main = "Race in Shelby County, TN")
aa <- 54.1; names(aa) <- "African American (54.1%)"
w <- 36.2; names(w) <- "White (41.4%)"
h <- 6.1; names(h) <- "Hispanic/Latino (6.1%)"
o <- 100-aa-w-h; names(o) <- "Other (3.6%)"
barplot(c(o,aa,h,w),main = "Race in Shelby County, TN")
l <- c(o,aa,h,w)
names(l)
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = l)
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l))
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l),las=2)
80%
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l),las=2,height = "80%")
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l),las=2,height = "100")
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l),las=2,height = 100)
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l),las=2,height = 10)
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l),las=2)
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l),las=2,col="cornflowerblue")
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l),las=3,col="cornflowerblue")
barplot(c(o,aa,h,w), main = "Race in Shelby County, TN",names.arg = names(l),las=2,col="cornflowerblue")
library(gsDesign)
gsDesign(k=4,test.type = 2,alpha = 0.05, beta=0.1,delta0 = p.t-p.c,delta1 = 0.4-0.25,n.fix =1,sfu="OF")
# Chunk 1
p.c <- .25
p.t <- .4
p.chat <- .2 #cv
p.that <- .3 #olpv
beta <- .1
alpha <- .05
# Chunk 2
pb <- (p.t+p.c)/2
n <- ceiling(((qnorm(1-alpha/2)*sqrt(2*pb*(1-pb)) +
qnorm(1-beta)*sqrt(p.t*(1-p.t) + p.c*(1-p.c)))^2)/(p.t-p.c)^2)
library(gsDesign)
gsDesign(k=4,test.type = 2,alpha = 0.05, beta=0.1,delta0 = p.t-p.c,delta1 = 0.4-0.25,n.fix =1,sfu="OF")
of <- gsDesign(k=4,test.type = 2,alpha = 0.05, beta=0.1,delta0 = p.t-p.c,delta1 = 0.4-0.25,n.fix =1,sfu="OF")
of$tol
of[1]
of$n.I
of$upper
of$upper$bound
c.val <- of$upper$bound[4]
c.vals <- of$upper$bound
i <- 1
x.i.cv[i]/n.i[i]
c.vals <- of$upper$bound
x.i.cv <- c(17,36,52,66)
x.i.olpv <- c(23,41,62,79)
n.i <- c(83,165,248,330)
x.i.cv[i]/n.i[i]
xt <- xt + x.i.cv[i]
xc <- xc + x.i.oplv[i]
xt <- xc <- nt <- nc <- 0
xt <- xt + x.i.cv[i]
xc <- xc + x.i.oplv[i]
x.i.olpv <- c(23,41,62,79)
c.vals <- of$upper$bound
x.i.cv <- c(17,36,52,66)
x.i.olpv <- c(23,41,62,79)
n.i <- c(83,165,248,330)
get.sigma <- function(pt,pc,nt,nc){
}
xt <- xc <- nt <- nc <- 0
xt <- xt + x.i.cv[i]
xc <- xc + x.i.olpv[i]
nc <- nc + n.i[i]
nt <- nt + n.i[i]
pt <- xt/nt
pc <- xc/nc
lb <- ub <- rep(NA,length(c.vals))
get.b <- function(pt,pc,nt,nc,c,n.tot){
ub <- (pt-pc) + c * sqrt(1*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
lb <- (pt-pc) - c * sqrt(1*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
}
a <- get.b(pt=pt,pc=pc,nt=nt,nc=nc,c=c.vals[i],n.tot = n.tot)
xt <- xt + x.i.cv[i]
xc <- xc + x.i.olpv[i]
nt <- nt + n.i[i]
nc <- nc + n.i[i]
pt <- xt/nt
pc <- xc/nc
n.tot <- nc+nt
a <- get.b(pt=pt,pc=pc,nt=nt,nc=nc,c=c.vals[i],n.tot = n.tot)
a
get.b <- function(pt,pc,nt,nc,c,n.tot){
ub <- (pt-pc) + c * sqrt(1*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
lb <- (pt-pc) - c * sqrt(1*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
list("ub"=ub,"lb"=lb)
}
a <- get.b(pt=pt,pc=pc,nt=nt,nc=nc,c=c.vals[i],n.tot = n.tot)
a
a <- get.b(pt=pt,pc=pc,nt=nt,nc=nc,c=c.vals[i],n.tot = n.tot)
a
(pt-pc) + c * sqrt(1*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
get.sigma(pt,pc,nt,nc)
pt*(1-pt)
(pt*(1-pt))/nt
(pc*(1-pc))/nc
(pt*(1-pt))/nt + (pc*(1-pc))/nc
get.sigma <- function(pt,pc,nt,nc){
return((pt*(1-pt))/nt + (pc*(1-pc))/nc)
}
get.sigma(pt,pc,nt,nc)
sqrt(2*get.sigma(pt,pc,nt,nc)^2)
ub <- (pt-pc) + c * sqrt(1*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
sqrt(2*get.sigma(pt,pc,nt,nc)^2)
sqrt(2*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
c * sqrt(2*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
c <- c.vals[i]
(pt-pc) + c * sqrt(2*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
(pt-pc) - c * sqrt(2*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
c.vals <- of$upper$bound
x.i.cv <- c(17,36,52,66)
x.i.olpv <- c(23,41,62,79)
n.i <- c(83,165,248,330)
get.sigma <- function(pt,pc,nt,nc){
return((pt*(1-pt))/nt + (pc*(1-pc))/nc)
}
get.b <- function(pt,pc,nt,nc,c,n.tot){
ub <- (pt-pc) + c * sqrt(2*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
lb <- (pt-pc) - c * sqrt(2*get.sigma(pt,pc,nt,nc)^2) * 1/sqrt(n.tot)
list("ub"=ub,"lb"=lb)
}
xt <- xc <- nt <- nc <- 0
ls <- us <- rep(NA,length(c.vals))
for(i in 1:length(c.vals)){
xt <- xt + x.i.cv[i]
xc <- xc + x.i.olpv[i]
nt <- nt + n.i[i]
nc <- nc + n.i[i]
pt <- xt/nt
pc <- xc/nc
n.tot <- nc+nt
a <- get.b(pt=pt,pc=pc,nt=nt,nc=nc,c=c.vals[i],n.tot = n.tot)
ls[i] <- a$lb
us[i] <- a$ub
}
ls
us
round(ls[1],4)
round(ls[1],5)
library(rvest)
w <- read_html("http://www.uvm.edu/storylab/share/papers/mitchell2013a/AppendixCTable.html")
w
html_text(html_nodes(w,"table"))
html_nodes(w,"table")
html_text(w)
html_nodes(w,"td")
w <- read_html("http://www.uvm.edu/storylab/share/papers/mitchell2013a/AppendixCTable.html")
html_nodes(w,"td")
html_nodes(w,"tr")
html_nodes(w,"body")
html_text(html_nodes(w,"body"))
html_nodes(w,"div")
html_text(html_nodes(w,"div"))
html_text()
html_text(w)
html_nodes(w,"data.addRows")
xpath = "//*[@id="table_div"]/div/div/table/tbody/tr[1]"
html_nodes(w,xpath = '//*[@id="table_div"]/div/div/table/tbody/tr[1]')
html_nodes(w)
html_text(w)
gregexpr("[",w)
gregexpr("[]",w)
gregexpr("[ ]",w)
a <- html_text(w)
length(a)
chaar(a)
nchar(a)
a <- html_text(w)
gregexpr("[ ]",a)
a
tokenizers::tokenize_words(a)
head(a)
gregexpr('target=\"rightside1\">pdf</a>', a)
a[630]
a[620]
substr(a,620,640)
substr(a,620,647)
substr(a,647,660)
substr(a,647,700)
substr(a,647,800)
gregexpr("[[:digits:]]",a)
gregexpr("\\d",a)
substr(a,8)
substr(a,8,100)
html_nodes(w,"div")
html_attr(html_nodes(w,"div"))
html_attr(html_nodes(w,"div"),name = "class")
html_nodes(w,"body")
gregexpr("td",a)
a
gregexpr("tr",a)
geturl("http://www.uvm.edu/storylab/share/papers/mitchell2013a/AppendixCTable.html")
getURL("http://www.uvm.edu/storylab/share/papers/mitchell2013a/AppendixCTable.html")
library(rvest);library(XML)
getURL("http://www.uvm.edu/storylab/share/papers/mitchell2013a/AppendixCTable.html")
library(rvest);library(XML);library(RCurl)
getURL("http://www.uvm.edu/storylab/share/papers/mitchell2013a/AppendixCTable.html")
readHTMLTable(getURL("http://www.uvm.edu/storylab/share/papers/mitchell2013a/AppendixCTable.html"))
z<-readHTMLTable(getURL("http://www.uvm.edu/storylab/share/papers/mitchell2013a/AppendixCTable.html"))
htmlTreeParse("http://www.uvm.edu/storylab/share/papers/mitchell2013a/AppendixCTable.html")
setwd("~/Desktop/R Files/Data Expo 2018/VUBiostat-JSM18")
read_html("body_text.html")
html_nodes(b,"td")
b <- read_html("body_text.html")
html_nodes(b,"td")
html_attr(html_nodes(b,"td"),class)
html_attr(html_nodes(b,"td"),"class")
head(html_attr(html_nodes(b,"td"),"class"))
html_nodes(b,"td")
html_text(html_nodes(b,"td"))
b.t <- html_text(html_nodes(b,"td"))
b.t[1:4]
b.t[1:5]
b.t[1:4]
b.t[5:8]
for(i in 1:length(b.t)){
}
length(b.t)
1492/4
df<- data.frame(matrix(NA,ncol=4,nrow=373))
names(df) <- c("rank","city","index","tweets")
b.t[i]
b.t[1]
i < -1
i <-1
as.character(b.t[i])
as.numeric(b.t[i])
as.numeric(b.t[i])
as.character(b.t[i+1])
as.numeric(b.t[i+2])
as.numeric(b.t[i+3])
as.character(b.t[i+3])
df<- data.frame(matrix(NA,ncol=4,nrow=373))
names(df) <- c("rank","city","index","tweets")
j <- i <- 1
while(i <= 1492){
df[j,]$rank <- as.numeric(b.t[i])
df[j,]$city <- as.character(b.t[i+1])
df[j,]$index <- as.numeric(b.t[i+2])
df[j,]$tweets <- as.character(b.t[i+3])
i <- i + 4
j <- j + 1
}
View(df)
df[1,]$city
substr(df[1,]$city,1,gregexpr(",",df[1,]$city))
substr(df[1,]$city,1,unlist(gregexpr(",",df[1,]$city)))
substr(df[1,]$city,1,unlist(gregexpr(",",df[1,]$city))+3)
substr(df$city,1,unlist(gregexpr(",",df$city))+3)
i <- 39
substr(df[i,]$city,1,unlist(gregexpr(",",df[i,]$city))+3)
for(i in 1:nrow(df)){
df[i,]$city <- substr(df[i,]$city,1,unlist(gregexpr(",",df[i,]$city))+3)
}
substr(df[i,]$city,unlist(gregexpr(",",df[i,]$city)),nchar(df[i,]$city))
substr(df[i,]$city,unlist(gregexpr(",",df[i,]$city))+2,nchar(df[i,]$city))
substr(df[i,]$city,unlist(gregexpr(",",df[i,]$city))+2,nchar(df[i,]$city))
substr(df[i,]$city,1,unlist(gregexpr(",",df[i,]$city))-1)
l <- readr::read_csv("Preliminary_Shiny/data/locations.csv")
View(l)
df[,'state'] <- NA
for(i in 1:nrow(df)){
df[i,]$state <- substr(df[i,]$city,unlist(gregexpr(",",df[i,]$city))+2,nchar(df[i,]$city))
df[i,]$city <- substr(df[i,]$city,1,unlist(gregexpr(",",df[i,]$city))-1)
}
View(df)
gsub(pattern = ",",replacement = '',x = df[i,]$tweets)
gsub(pattern = ",",replacement = '',x = df$tweets)
as.numeric(gsub(pattern = ",",replacement = '',x = df$tweets))
df$tweets <- as.numeric(gsub(pattern = ",",replacement = '',x = df$tweets))
l[,'index'] <- l[,'tweets'] <- NA
c <- l[i,]$city
c
i <- 1
c <- l[i,]$city
x
c
state.abb[match(l[i,]$state,state.name)]
gregexpr(c,df$city)
unlist(gregexpr(c,df$city))
v[which(v>0)]
v <- unlist(gregexpr(c,df$city))
v[which(v>0)]
if(v[which(v>0)]){print("sklfj;as")}
x <- v[which(v>0)]
x
i <- 4
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
v <- unlist(gregexpr(c,df$city))
v
length(v[which(v>0)])
grepRaw(c,df$city)
which(df$city==c)
df[which(df$city==c),]
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
v <- unlist(gregexpr(c,df$city))
l <- length(v[which(v>0)])
if(l == 1){
r.p <- df[which(df$city==c),]
l[i,]$index <- r.p$index
l[i,]$tweets <- r.p$tweets
}
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
i <- 4
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
l <- readr::read_csv("Preliminary_Shiny/data/locations.csv")
l[,'index'] <- l[,'tweets'] <- NA
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
v <- unlist(gregexpr(c,df$city))
le <- length(v[which(v>0)])
if(le == 1){
r.p <- df[which(df$city==c),]
l[i,]$index <- r.p$index
l[i,]$tweets <- r.p$tweets
}
unlist(gregexpr(c,df$city))
df[which(df$city==c),]
cdd <- df[which(df$city==c),]
match(cdd$state,s)
cdd[2,]$state <- "DC"
match(cdd$state,s)
match(l[i,]$state,state.name)
cdd
match(s,df$state)
match("NC",df$state)
match("CA",df$state)
df$state
cdd[which(df$state==s),]
i <- 4
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
v <- unlist(gregexpr(c,df$city))
v
df[which(df$city==c && df$state==s),]
c
df$city
df$state
which(df$city==c && df$state==s)
which(df$city==c & df$state==s)
i <- 5
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
c;s
v <- unlist(gregexpr(c,df$city))
r.p <- df[which(df$city==c & df$state==s),]
r.p
l[i,]$index <- r.p$index
l[i,]$tweets <- r.p$tweets
for(i in 1:nrow(l)){
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
r.p <- df[which(df$city==c & df$state==s),]
l[i,]$index <- r.p$index
l[i,]$tweets <- r.p$tweets
}
i <- 1
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
df[which(df$city==c & df$state==s),]
for(i in 1:nrow(l)){
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
r.p <- df[which(df$city==c & df$state==s),]
if(nrow(r.p) > 1){
l[i,]$index <- r.p$index
l[i,]$tweets <- r.p$tweets
}
}
for(i in 1:nrow(l)){
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
r.p <- df[which(df$city==c & df$state==s),]
if(nrow(r.p) >= 1){
l[i,]$index <- r.p$index
l[i,]$tweets <- r.p$tweets
}
}
df$city=="Charleston"
df[df$city=="Charleston",]
df[df$city=="New York",]
df[df$city=="San Francisco",]
grepl("San Fran",df$city)
df[grepl("San Fran",df$city),]
for(i in 1:nrow(l)){
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
r.p <- df[which(grepl(c,df$city) & df$state==s),]
if(nrow(r.p) >= 1){
l[i,]$index <- r.p$index
l[i,]$tweets <- r.p$tweets
}
}
l[is.na(l$tweets),]
l[!is.na(l$tweets),]
l.p <- l[!is.na(l$tweets),]
View(l.p)
write.csv(l.p,"locations_with_index.csv")
View(l.p)
library(rvest);library(XML);library(RCurl)
l <- readr::read_csv("Preliminary_Shiny/data/locations.csv")
b <- read_html("body_text.html")
b.t <- html_text(html_nodes(b,"td"))
df<- data.frame(matrix(NA,ncol=4,nrow=373))
names(df) <- c("rank","city","index","tweets")
j <- i <- 1
while(i <= 1492){
df[j,]$rank <- as.numeric(b.t[i])
df[j,]$city <- as.character(b.t[i+1])
df[j,]$index <- as.numeric(b.t[i+2])
df[j,]$tweets <- as.character(b.t[i+3])
i <- i + 4
j <- j + 1
}
for(i in 1:nrow(df)){
df[i,]$city <- substr(df[i,]$city,1,unlist(gregexpr(",",df[i,]$city))+3)
}
df[,'state'] <- NA
for(i in 1:nrow(df)){
df[i,]$state <- substr(df[i,]$city,unlist(gregexpr(",",df[i,]$city))+2,nchar(df[i,]$city))
df[i,]$city <- substr(df[i,]$city,1,unlist(gregexpr(",",df[i,]$city))-1)
}
df$tweets <- as.numeric(gsub(pattern = ",",replacement = '',x = df$tweets))
l[,'index'] <- l[,'tweets'] <- NA
for(i in 1:nrow(l)){
c <- l[i,]$city; s <- state.abb[match(l[i,]$state,state.name)]
r.p <- df[which(grepl(c,df$city) & df$state==s),]
if(nrow(r.p) >= 1){
l[i,]$index <- r.p$index
l[i,]$tweets <- r.p$tweets
}
}
l.p2 <- l
