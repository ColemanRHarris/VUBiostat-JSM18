df <- data.frame(matrix(NA,nrow=length(h)-1,ncol=2))
names(df) <- c("name","email")
for(i in 2:length(h)){
name <- substr(h[i],unlist(gregexpr("\\t",h[i]))[2]+1,
unlist(gregexpr('[[:alpha:]][[:upper:]]',h[i])))
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email <- NA}
df[(i-1),] <- cbind(name,email)
}
#df[!is.na(df$email),]
df
}
get.names(w)
keep <- c()
for(i in 2:length(links1)){
download.file(links1[i],destfile="scrape.html",quiet=TRUE)
w <- read_html("scrape.html")
h <- html_text(html_nodes(w,"p"))
if(!(length(h>0) && grepl("No records found",h))){
#df <- rbind(df,get.names(w))
keep <- c(keep,i)
}
print(i)
Sys.sleep(time=5)
}
links1[keeps]
links1 <- links1[keep]
cbind(links1)
saveRDS(cbind(links1),"belmontlinks.rds")
# links1 <- links1[keep]
# saveRDS(cbind(links1),"belmontlinks.rds")
l <- readRDS("belmontlinks.rds")
View(l)
log(.5)
log(14)
$$\mu = 367.9$$
$$\alpha_1 = 317.1 - 367.9 = -50.8$$
$$\beta_1 = 286.1 - 367.8 = -81.8$$
$$\hat{\gamma}_{11} = 171.4 - 317.1 - 286.1 + 367.9 = -63.9$$
(83.7^2 -91^2-78.1^2+91.4^2)
(83.7^2 -91^2-78.1^2+91.4^2)/30
-63.9/32.63
qt(p = .95)
qt(p = .95,df=1)
qt(p = .05,df=1)
qt(p = .05/2,df=1)
-63.9/32.63
# links1 <- links1[keep]
# saveRDS(cbind(links1),"belmontlinks.rds")
l <- readRDS("belmontlinks.rds")
l
l[i]
l[i,]
l[1,]
nrow(l)
read_html(l[i,])
i <- 1
read_html(l[i,])
for(i in 1:nrow(l)){
#download.file(links1[i],destfile="scrape.html",quiet=TRUE)
w <- read_html(l[i,])
h <- html_text(html_nodes(w,"p"))
print(i)
Sys.sleep(time=3)
}
for(i in 1:nrow(l)){
#download.file(links1[i],destfile="scrape.html",quiet=TRUE)
w <- read_html(l[i,])
h <- html_text(html_nodes(w,"p"))
print(i)
Sys.sleep(time=4)
}
i <- 1
#download.file(links1[i],destfile="scrape.html",quiet=TRUE)
w <- read_html(l[i,])
get.names <- function(w){
h <- html_text(html_nodes(w,"tr"))
df <- data.frame(matrix(NA,nrow=length(h)-1,ncol=2))
names(df) <- c("name","email")
for(i in 2:length(h)){
name <- substr(h[i],unlist(gregexpr("\\t",h[i]))[2]+1,
unlist(gregexpr('[[:alpha:]][[:upper:]]',h[i])))
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email <- NA}
df[(i-1),] <- cbind(name,email)
}
#df[!is.na(df$email),]
df
}
get.names(w)
a <- get.names(w)
View(a)
i <- 2
w <- read_html(l[i,])
a <- get.names(w)
View(a)
h <- html_text(html_nodes(w,"tr"))
df <- data.frame(matrix(NA,nrow=length(h)-1,ncol=2))
names(df) <- c("name","email")
h
h <- html_text(html_nodes(w,"tr"))
df <- data.frame(matrix(NA,nrow=length(h)-1,ncol=2))
names(df) <- c("name","email")
for(i in 2:length(h)){
name <- substr(h[i],unlist(gregexpr("\\t",h[i]))[2]+1,
unlist(gregexpr('[[:alpha:]][[:upper:]]',h[i])))
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email <- NA}
df[(i-1),] <- cbind(name,email)
}
i
name <- substr(h[i],unlist(gregexpr("\\t",h[i]))[2]+1,
unlist(gregexpr('[[:alpha:]][[:upper:]]',h[i])))
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
h
h[i]
grepl("\\(",h[i])
h <- html_text(html_nodes(w,"tr"))
df <- data.frame(matrix(NA,nrow=length(h)-1,ncol=2))
names(df) <- c("name","email")
for(i in 2:length(h)){
name <- substr(h[i],unlist(gregexpr("\\t",h[i]))[2]+1,
unlist(gregexpr('[[:alpha:]][[:upper:]]',h[i])))
if(grepl("\\(",h[i])){
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email <- NA}
} else{name <- email <- NA}
df[(i-1),] <- cbind(name,email)
}
View(df)
df <- data.frame()
for(i in 1:nrow(l)){
w <- read_html(l[i,])
df <- rbind(df,get.names(w))
print(i)
Sys.sleep(time=5)
}
i
w <- read_html(l[i,])
w
html_text(w)
get.names(w)
h <- html_text(html_nodes(w,"tr"))
df <- data.frame(matrix(NA,nrow=length(h)-1,ncol=2))
names(df) <- c("name","email")
h
for(i in 2:length(h)){
name <- substr(h[i],unlist(gregexpr("\\t",h[i]))[2]+1,
unlist(gregexpr('[[:alpha:]][[:upper:]]',h[i])))
if(grepl("\\(",h[i])){
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email <- NA}
} else{name <- email <- NA}
df[(i-1),] <- cbind(name,email)
}
View(df)
i <- 2
w <- read_html(l[i,])
h <- html_text(html_nodes(w,"tr"))
df <- data.frame(matrix(NA,nrow=length(h)-1,ncol=2))
names(df) <- c("name","email")
for(i in 2:length(h)){
name <- substr(h[i],unlist(gregexpr("\\t",h[i]))[2]+1,
unlist(gregexpr('[[:alpha:]][[:upper:]]',h[i])))
if(grepl("\\(",h[i])){
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email <- NA}
} else{name <- email <- NA}
df[(i-1),] <- cbind(name,email)
}
get.names <- function(w){
h <- html_text(html_nodes(w,"tr"))
df <- data.frame(matrix(NA,nrow=length(h)-1,ncol=2))
names(df) <- c("name","email")
for(i in 2:length(h)){
name <- substr(h[i],unlist(gregexpr("\\t",h[i]))[2]+1,
unlist(gregexpr('[[:alpha:]][[:upper:]]',h[i])))
if(grepl("\\(",h[i])){
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email <- NA}
} else{name <- email <- NA}
df[(i-1),] <- cbind(name,email)
}
df
}
df <- data.frame()
for(i in 1:nrow(l)){
w <- read_html(l[i,])
df <- rbind(df,get.names(w))
print(i)
Sys.sleep(time=5)
}
View(df)
i <- 1
w <- read_html(l[i,])
html_nodes(w,"strong")
html_text(html_nodes(w,"strong"))
##names
h <- html_text(html_nodes(w,"strong"))
h
h[1]
trimws(h[1])
i <- 2
w <- read_html(l[i,])
##names
h <- html_text(html_nodes(w,"strong"))
h
dept <- h[1]
dept
gregexpr("  ",dept)
unlist(gregexpr("  ",dept))[1]
substr(dept,1,unlist(gregexpr("  ",dept))[1])
substr(dept,1,unlist(gregexpr("  ",dept))[1]-2)
substr(dept,1,unlist(gregexpr("  ",dept))[1]-1)
i <- 1
w <- read_html(l[i,])
##names
h <- html_text(html_nodes(w,"strong"))
substr(h[1],1,unlist(gregexpr("  ",dept))[1]-1)
h[1]
substr(h[1],1,unlist(gregexpr("  ",h[1]))[1]-1)
length(h)
names <- h[2:length(h)]
##emails
html_nodes(w,a)
##emails
html_nodes(w,"a")
##emails
html_nodes(w,"td")
##emails
html_nodes(html_nodes(w,"td"), "a")
##emails
html_nodes(html_nodes(w,"tr"), "a")
html_nodes(w,"tr")
##emails
html_text(html_nodes(w,"tr"))
##emails
html_text(html_nodes(w,"table"))
h <- html_text(html_nodes(w,"tr"))
i <- 2
grepl("contact\\(",h[i])
h[i]
substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
h <- html_text(html_nodes(w,"tr"))
email <- rep(NA,length(h))
for(i in 2:length(h)){
if(grepl("contact\\(",h[i])){
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email[i] <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email[i] <- NA}
} else{email[i] <- NA}
}
email
h
for(i in 2:length(h)){
if(grepl("contact\\(",h[i])){
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email[i] <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email[i] <- NA}
} else{email[i] <- NA}
}
email
h <- html_text(html_nodes(w,"tr"))
email <- rep(NA,length(h))
email <- rep(NA,length(h)-1)
for(i in 2:length(h)){
if(grepl("contact\\(",h[i])){
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email[i-1] <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email[i-1] <- NA}
} else{email[i-1] <- NA}
}
email
##names
h <- html_text(html_nodes(w,"strong"))
dept <- substr(h[1],1,unlist(gregexpr("  ",h[1]))[1]-1)
names <- h[2:length(h)]
emails <- get.emails(w)
get.emails <- function(w){
h <- html_text(html_nodes(w,"tr"))
email <- rep(NA,length(h)-1)
for(i in 2:length(h)){
if(grepl("contact\\(",h[i])){
pars <- substr(h[i],grepRaw("\\(",h[i]),grepRaw("\\)",h[i]))
cs <- unlist(gregexpr(",",pars))
if(length(cs)>0 && cs!=-1){
email[i-1] <- substr(pars,cs[length(cs)-1]+2,cs[length(cs)]-2)
} else{email[i-1] <- NA}
} else{email[i-1] <- NA}
}
email
}
emails <- get.emails(w)
data.frame(cbind(names,dept,emails))
get.namesp <- function(w){
##names
h <- html_text(html_nodes(w,"strong"))
dept <- substr(h[1],1,unlist(gregexpr("  ",h[1]))[1]-1)
names <- h[2:length(h)]
emails <- get.emails(w)
data.frame(cbind(names,dept,emails))
}
df <- data.frame()
l <- readRDS("belmontlinks.rds")
df <- data.frame()
i <- 1
w <- read_html(l[i,])
df <- rbind(df,get.namesp(w))
View(df)
i <- 2
w <- read_html(l[i,])
df <- rbind(df,get.namesp(w))
View(df)
l <- readRDS("belmontlinks.rds")
df <- data.frame()
for(i in 1:nrow(l)){
w <- read_html(l[i,])
df <- rbind(df,get.namesp(w))
print(i)
Sys.sleep(time=5)
}
View(df)
df[which(df$dept != "Dining Services"),]
df <- df[which(df$dept != "Dining Services"),]
df[is.na(df$emails),]
ns <- df[is.na(df$emails),]
View(ns)
df938,
df[938,]
df[927,]
df[927,]$emails <- "brian.turner"
as.character(df[,3])
df[,3] <- as.character(df[,3])
df[927,]$emails <- "brian.turner"
is.na(df$emails)
l
i <- 23
w <- read_html(l[i,])
##names
h <- html_text(html_nodes(w,"strong"))
dept <- substr(h[1],1,unlist(gregexpr("  ",h[1]))[1]-1)
dept
names <- h[2:length(h)]
names
get.emails(w)
data.frame(cbind(names,dept,emails))
d <-data.frame(cbind(names,dept,emails))
View(d)
emails <- get.emails(w)
d <-data.frame(cbind(names,dept,emails))
View(d)
View(ns)
df[189,]
df[188,]
df[190,]
df[200,]
df[200,]$emails <- "tonya.hollin"
df[213,]$emails <- "melissa.mitchell"
df[235,]$emails <- "misty.wims"
df[235,]
ns <- df[is.na(df$emails),]
View(ns)
df[!is.na(df$emails),]
ns <- df[!is.na(df$emails),]
df <- df[!is.na(df$emails),]
View(df)
df$emails <- paste0(df$emails,"@belmont.edu")
df[,'sal'] <- df[,'last_name'] <- NA
n <- df[i,]$names
n
df[1,] <- as.character(df[1,])
df <- na
df <- ns
as.character(df[,1])
df[,1] <- as.character(df[,1])
df[,'sal'] <- df[,'last_name'] <- NA
shiny::runApp('Desktop/R Files/Data Expo 2018/VUBiostat-JSM18/Preliminary_Shiny')
runApp('Desktop/R Files/Data Expo 2018/VUBiostat-JSM18/Preliminary_Shiny')
runApp('Desktop/R Files/Data Expo 2018/VUBiostat-JSM18/Preliminary_Shiny')
runApp('Desktop/R Files/Data Expo 2018/VUBiostat-JSM18/Preliminary_Shiny')
runApp('Desktop/R Files/Data Expo 2018/VUBiostat-JSM18/Preliminary_Shiny')
runApp('Desktop/R Files/Data Expo 2018/VUBiostat-JSM18/Preliminary_Shiny')
input <- list();input$city <- "Tampa, FL"
library(shiny)
library(readr)
library(ggplot2)
library(leaflet)
library(dplyr)
library(magrittr)
locations <- read_csv("data/locations_with_index.csv"); locations <- locations[,-c(1)]
fore <- readRDS("data/forecast1.rds")
hist <- read_csv("data/historical1.csv")
mns <- read_csv("data/variable_means.csv")
qpal <- colorQuantile("Reds", locations$index, n = 3)
setwd("~/Desktop/R Files/Data Expo 2018/VUBiostat-JSM18/Preliminary_Shiny")
library(shiny)
library(readr)
library(ggplot2)
library(leaflet)
library(dplyr)
library(magrittr)
locations <- read_csv("data/locations_with_index.csv"); locations <- locations[,-c(1)]
fore <- readRDS("data/forecast1.rds")
hist <- read_csv("data/historical1.csv")
mns <- read_csv("data/variable_means.csv")
qpal <- colorQuantile("Reds", locations$index, n = 3)
locations[which(locations$city %in% input$city),]
locations$city
locations[which(stringr::str_detect(locations$city,input$city)),]
locations$city
stringr::str_detect(locations$city,input$city)
stringr::str_detect(input$city,locations$city)
l <- locations[which(stringr::str_detect(input$city,locations$city)),]
l
l[which(stringr::str_detect(input$city,l$state_abb)),]
l <- l[which(stringr::str_detect(input$city,l$state_abb)),]
hist[which(hist$AirPtCd == l$AirPtCd),]
runApp()
input$city <- "Tampa, Florida"
substr(input$city,grepRaw(",",input$city+1,nchar(input$city)))
substr(input$city,grepRaw(",",input$city)+1,nchar(input$city)))
substr(input$city,grepRaw(",",input$city)+1,nchar(input$city))
substr(input$city,grepRaw(",",input$city)+2,nchar(input$city))
state.abb[substr(input$city,grepRaw(",",input$city)+2,nchar(input$city))]
state.abb[which(state.abb == substr(input$city,grepRaw(",",input$city)+2,nchar(input$city)))]
state.abb
state.abb[which(state.name == substr(input$city,grepRaw(",",input$city)+2,nchar(input$city)))]
l <- locations[which(stringr::str_detect(input$city,locations$city)),]
s <- state.abb[which(state.name == substr(input$city,grepRaw(",",input$city)+2,nchar(input$city)))]
l <- l[which(stringr::str_detect(s,l$state_abb)),]
runApp()
if(input$var == "Minimum Temperature (F)"){
v <- "Min_TemperatureF"} else if(input$var == "Maximum Temperature (F)"){
v <- "Max_TemperatureF"} else{
v <- "PrecipitationIn"
}
input$var <- "Minimum Temperature (F)"
if(input$var == "Minimum Temperature (F)"){
v <- "Min_TemperatureF"} else if(input$var == "Maximum Temperature (F)"){
v <- "Max_TemperatureF"} else{
v <- "PrecipitationIn"
}
l <- locations[which(stringr::str_detect(input$city,locations$city)),]
s <- state.abb[which(state.name == substr(input$city,grepRaw(",",input$city)+2,nchar(input$city)))]
l <- l[which(stringr::str_detect(s,l$state_abb)),]
f <- fore[which(fore$airport_code == l$AirPtCd),]
# f <- subset(fore,fore$airport_code == locations[which(stringr::str_detect(input$city,locations$city) & stringr::str_detect(input$city,locations$state_abb)),]$AirPtCd)
f <- subset(f,f$delta_t == as.numeric(input$days) & f$forecast_variable == v)
input$days <- "0"
s <- state.abb[which(state.name == substr(input$city,grepRaw(",",input$city)+2,nchar(input$city)))]
l <- l[which(stringr::str_detect(s,l$state_abb)),]
f <- fore[which(fore$airport_code == l$AirPtCd),]
# f <- subset(fore,fore$airport_code == locations[which(stringr::str_detect(input$city,locations$city) & stringr::str_detect(input$city,locations$state_abb)),]$AirPtCd)
f <- subset(f,f$delta_t == as.numeric(input$days) & f$forecast_variable == v)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Campaigns/Wade Munday - TN Senate District 25/github/District-25/PrecinctDatawithShiny.R')
runApp()
setwd("~/Desktop/R Files/Data Expo 2018/VUBiostat-JSM18/Preliminary_Shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sort(paste(locations$city,", ",locations$state,sep=''))
runApp()
runApp()
runApp()
runApp('~/Desktop/Campaigns/Wade Munday - TN Senate District 25/github/District-25/PrecinctDatawithShiny.R')
View(locations)
row.names(locations)
runApp()
runApp()
runApp()
?colorQuantile
runApp()
runApp('~/Desktop/Campaigns/Wade Munday - TN Senate District 25/github/District-25/PrecinctDatawithShiny.R')
runApp()
runApp()
runApp()
runApp()
